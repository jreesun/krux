# The MIT License (MIT)

# Copyright (c) 2021-2023 Krux contributors

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

[tool.poetry]
name = "krux"
version = "23.09.1"
description = "Open-source signing device firmware for Bitcoin"
authors = ["Jeff S <jeffreesun@protonmail.com>"]

[tool.poetry.dependencies]
python = "^3.9.1"
googletrans = "^4.0.0rc1"
embit = { path = "./vendor/embit/", develop = true }
ur = { path = "./vendor/foundation-ur-py/", develop = true }
urtypes = { path = "./vendor/urtypes/", develop = true }

# Docs site dependencies. Optional extras
mkdocs = { version = "^1.5.2", optional = true }
mkdocs-material = { version = "^8.5.11", optional = true }
mkdocs-static-i18n = { version = "^0.46", optional = true }
pymdown-extensions = { version = "^9.11", optional = true }

# Simulator dependencies. Optional extras
numpy = { version = "^1.25.2", optional = true }
opencv-python = { version = "^4.8.0.74", optional = true }
Pillow = { version = "^9.0.1", optional = true }
pygame = { version = "^2.5.0", optional = true }
pyzbar = { version = "^0.1.9", optional = true }

[tool.poetry.group.dev.dependencies]
black = "^23.3.0"
pylint = "^2.12.2"
pytest = "^6.2.5"
pytest-cov = "^3.0.0"
pytest-mock = "^3.6.1"
PyQRCode = "^1.2.1"
pycryptodome = "^3.17.0"
poethepoet = "^0.24.4"
pymarkdownlnt = "^0.9.15"

[tool.poetry.extras]
docs = ["mkdocs", "mkdocs-material", "mkdocs-static-i18n", "pymdown-extensions"]
simulator = ["numpy", "opencv-python", "Pillow", "pygame", "pyzbar"]

[tool.poe.tasks]
# tasks for update repository
# all tasks that start with `_` are'nt callable
_update-pull = "git pull origin main"
_update-submodules = "git submodule update --init --recursive"
update-repo = ["_update-pull", "_update-submodules"]

# tasks for format code with black
# all tasks that start with `_` are'nt callable
_format-firmware-font = "black ./firmware/font"
_format-firmware-scripts = "black ./firmware/scripts"
_format-firmware = ["_format-firmware-font", "_format-firmware-scripts"]
_format-i18n = "black ./i18n/i18n.py"
_format-simulator = "black ./simulator/simulator.py"
_format-src = "black ./src"
_format-tests = "black ./tests"
format = ["_format-firmware", "_format-i18n", "_format-simulator", "_format-src", "_format-tests"]

# tasks for lint code with pylint
# all tasks that start with `_` are'nt callable
_lint-firmware-font = "pylint ./firmware/font"
_lint-firmware-scripts = "pylint ./firmware/scripts"
_lint-firmware = ["_lint-firmware-font", "_lint-firmware-scripts"]
_lint-i18n = "pylint ./i18n/i18n.py"
_lint-simulator = "pylint ./simulator/simulator.py"
_lint-src = "pylint ./src"
_lint-tests = "pylint ./tests"
lint = ["_lint-i18n", "_lint-simulator", "_lint-src", "_lint-tests"]

# tasks for lint markdown texts code with pymarkdownlnt
# all tasks that start with `_` are'nt callable
_lint-md-readme = "pymarkdown scan README.md"
_lint-md-changelog = "pymarkdown scan CHANGELOG.md"
_lint-md-docs = "pymarkdown scan docs"
lint-markdown = ["_lint-md-readme","_lint-md-changelog", "_lint-md-docs"]

# tasks for test code
test = "poetry run pytest --cache-clear --cov src/krux --cov-report html ./tests"
test-verbose = "poetry run pytest --cache-clear --cov src/krux --cov-report html --show-capture all --capture tee-sys -r A ./tests"
test-specific = "poetry run pytest --cache-clear" # Need extra arguments

# tasks for simulation
# put --sd if you want to simulate sd
sim-m5stickv = "python simulator/simulator.py --device maixpy_m5stickv" 
sim-amigo-tft = "python simulator/simulator.py --device maixpy_amigo_tft"
sim-amigo-ips = "python simulator/simulator.py --device maixpy_amigo_ips"
sim-dock = "python simulator/simulator.py --device maixpy_dock"

# tasks for live debug
live-debug = "screen /dev/tty.usbserial-device-name 115200"

# tasks for build docs
docs-serve = "mkdocs serve"
docs-build = "mkdocs build --output" # Need an extra argument
